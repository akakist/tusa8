#include "stdafx.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#endif

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <iterator>
#include <fstream>
#include <iostream>

#include <sys/types.h>
#ifndef WIN32
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/stat.h>
#else
#include <time.h>
#endif
#include <vector>
#include <map>
#ifndef WIN32

#endif
#include <stdio.h>
#include "_mutex.h"
#include "errs.h"
#include "str_lib.h"
#include <errno.h>

#include <sys/types.h>
#ifndef WIN32
#include <sys/stat.h>
#endif
#include <stdio.h>
#include <vector>
#include <list>
#include "str_lib.h"
#ifndef WIN32
#include <sys/errno.h>
#endif
#include "errs.h"
#include <cerrno>
#include "str_lib.h"
#ifndef WIN32
#include <zlib.h>
#endif
#include "mutex_inspector.h"
#include "lockctl.h"
#include <cstdarg>

#ifdef WIN32
#define snprintf _snprintf
#endif
using namespace std;
#ifdef _WIN32
std::string split_char = "\\";
#else
#ifdef macintosh
std::string split_char = ":";
#else
std::string split_char = "/";
#endif
#endif
#pragma warning(disable: 4309)

std::string itostring(int i)
{


    char ss[200];
    std::string s;
    ::snprintf(ss, sizeof(ss) - 1, "%d", i);
    s = ss;
    return s;
}

std::string itostring(unsigned int i)
{


    char ss[200];
    std::string s;
    ::snprintf(ss, sizeof(ss) - 1, "%d", i);
    s = ss;
    return s;
}
std::string itostring(unsigned long i)
{


    char ss[200];
    std::string s;
    ::snprintf(ss, sizeof(ss) - 1, "%lu", i);
    s = ss;
    return s;
}
std::string itostring(long i)
{


    char ss[200];
    std::string s;
    ::snprintf(ss, sizeof(ss) - 1, "%ld", i);
    s = ss;
    return s;
}


std::string ftostring(double i)
{
    char ss[200];
    std::string s;
    ::snprintf(ss, sizeof(ss) - 1, "%f", i);
    s = ss;
    return s;
}

std::vector < std::string> splitTOK(const char *seps, const char *src)
{

    std::vector < std::string> res;
    map < char, int >mm;
    unsigned int l;
    l =::strlen(seps);
    for (unsigned int i = 0; i < l; i++) {
        mm[seps[i]] = 100;
    }
    std::string tmp;
    l =::strlen(src);
{   for (unsigned int i = 0; i < l; i++) {

            if (mm[src[i]] != 100)
                tmp += src[i];
            else {
                if (tmp.size()) {
                    res.push_back(tmp);
                    tmp = "";
                }
            }
        }
    }
    if (tmp.size()) {
        res.push_back(tmp);
        tmp = "";
    }
    return res;
}
std::deque< std::string> splitTOKd(const char *seps, const char *src)
{

    std::deque < std::string> res;
    map < char, int >mm;
    unsigned int l;
    l =::strlen(seps);
    for (unsigned int i = 0; i < l; i++) {
        mm[seps[i]] = 100;
    }
    std::string tmp;
    l =::strlen(src);
{   for (unsigned int i = 0; i < l; i++) {

            if (mm[src[i]] != 100)
                tmp += src[i];
            else {
                if (tmp.size()) {
                    res.push_back(tmp);
                    tmp = "";
                }
            }
        }
    }
    if (tmp.size()) {
        res.push_back(tmp);
        tmp = "";
    }
    return res;
}

std::vector < std::string> splitTOK(const char *seps, const std::string & src)
{


    std::vector < std::string> res;
    std::map < char, int >mm;
    unsigned int l;
    l =::strlen(seps);
    for (unsigned int i = 0; i < l; i++) {
        mm[seps[i]] = 100;
    }
    std::string tmp;
    l = src.size();
{   for (unsigned int i = 0; i < l; i++) {

            if (mm[src[i]] != 100)
                tmp += src[i];
            else {
                if (tmp.size()) {
                    res.push_back(tmp);
                    tmp = "";
                }
            }
        }
    }
    if (tmp.size()) {
        res.push_back(tmp);
        tmp = "";
    }
    return res;
}
std::deque < std::string> splitTOKd(const char *seps, const std::string & src)
{


    std::deque< std::string> res;
    std::map < char, int >mm;
    unsigned int l;
    l =::strlen(seps);
    for (unsigned int i = 0; i < l; i++) {
        mm[seps[i]] = 100;
    }
    std::string tmp;
    l = src.size();
{   for (unsigned int i = 0; i < l; i++) {

            if (mm[src[i]] != 100)
                tmp += src[i];
            else {
                if (tmp.size()) {
                    res.push_back(tmp);
                    tmp = "";
                }
            }
        }
    }
    if (tmp.size()) {
        res.push_back(tmp);
        tmp = "";
    }
    return res;
}

std::string join(const char *pattern, const std::vector < std::string> &arr)
{

    return join((std::string) pattern, arr);
}

std::string join(const std::string & pattern, const std::vector < std::string> &arr)
{

    std::string ret;
    if (arr.size() > 1) {
        unsigned int i;
        for (i = 0; i < arr.size() - 1; i++)
            ret += arr[i] + pattern;
        ret += arr[arr.size() - 1];
    }
    else if (arr.size() == 1) {
        ret += arr[0];
    }
    return ret;
}
std::string join(const char *pattern, const std::set < std::string> &st)
{

    std::string ret;
    std::vector<std::string> arr;
    for(std::set < std::string>::const_iterator j=st.begin(); j!=st.end(); j++)
    {
        arr.push_back(*j);
    }
    return join(pattern,arr);
}
string join(const char *pattern, const deque <string> &st)
{

    string ret;
    vector<string> arr;
    for(deque <string>::const_iterator j=st.begin(); j!=st.end(); j++)
    {
        arr.push_back(*j);
    }
    return join(pattern,arr);
}
string rjoin(const char *pattern, const deque <string> &st)
{

    string ret;
    vector<string> arr;
    for(deque <string>::const_reverse_iterator j=st.rbegin(); j!=st.rend(); j++)
    {
        arr.push_back(*j);
    }
    return join(pattern,arr);
}
unsigned char l_table[] = {
    /*
    	lowercase table
    */
    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd,
    0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
    0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
    0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d,
    0x3e, 0x3f, 0x40, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
    0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x78, 0x79, 0x7a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61,
    0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
    0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
    0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x90, 0x83, 0x82, 0x83, 0x84, 0x85,
    0x86, 0x87, 0x88, 0x89, 0x9a, 0x8b, 0x9c, 0x9d, 0x9e, 0x9f, 0x90, 0x91,
    0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d,
    0x9e, 0x9f, 0xa0, 0xa2, 0xa2, 0xbc, 0xa4, 0xb4, 0xa6, 0xa7, 0xb8, 0xa9,
    0xba, 0xab, 0xac, 0xad, 0xae, 0xbf, 0xb0, 0xb1, 0xb3, 0xb3, 0xb4, 0xb5,
    0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbe, 0xbe, 0xbf, 0xe0, 0xe1,
    0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed,
    0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
    0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5,
    0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1,
    0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
    0xfe, 0xff
};

unsigned char u_table[] = {
    /*
    	uppercase table
    */
    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd,
    0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
    0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
    0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d,
    0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
    0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
    0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x41,
    0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d,
    0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
    0x5a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x81, 0x84, 0x85,
    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x80, 0x91,
    0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x8a, 0x9b, 0x8c, 0x8d,
    0x8e, 0x8f, 0xa0, 0xa1, 0xa1, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9,
    0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb2, 0xa5, 0xb5,
    0xb6, 0xb7, 0xa8, 0xb9, 0xaa, 0xbb, 0xa3, 0xbd, 0xbd, 0xaf, 0xc0, 0xc1,
    0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd,
    0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
    0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5,
    0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1,
    0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd,
    0xde, 0xdf
};

string strupper(const string &s)
{

    std::string a;
    for(unsigned int i=0; i<s.length(); i++) {
        unsigned char z=s[i];
        a+=u_table[z];
    }
    return a;
}

std::string strlower(const std::string & s)
{
    /*
    	convert string to lowercase
    */
    std::string a;
    for (unsigned int i = 0; i < s.length(); i++) {
        unsigned char z = s[i];
        a += l_table[z];
    }
    return a;
}
int atoi(const string &s)
{
    return atoi(s.c_str());
}
string sockaddr_to_string(const unsigned int pa)
{
    /*
    	convert sockaddr_in.sin_addr.s_addr  to string
    */
    string s;
    s+=itostring(pa & 0xff);
    s+=".";
    s+=itostring((pa & 0xff00)/256);// shr 8);
    s+=".";
    s+=itostring((pa & 0xff0000)/65536);// shr 16);
    s+=".";
    s+=itostring((pa & 0xff000000)/16777216);// shr 24);
    return s;
}
unsigned char nicks_char[256] = {
    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd,
    0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
    0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
    0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d,
    0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
    0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
    0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61,
    0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
    0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
    0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,
    0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91,
    0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d,
    0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9,
    0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5,
    0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x41, 0xc1,
    0x42, 0xc3, 0xc4, 0x45, 0xc6, 0xc7, 0xc8, 0xc9, 0x4b, 0xcb, 0x4d, 0x48,
    0x4f, 0xcf, 0x50, 0x43, 0x54, 0xd3, 0xd4, 0x58, 0xd6, 0xd7, 0xd8, 0xd9,
    0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0x61, 0xe1, 0xe2, 0xe3, 0xe4, 0x65,
    0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0x6f, 0xef, 0x70, 0x63,
    0xf2, 0xf3, 0xf4, 0x58, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
    0xfe, 0xff
};

string str_nick(const string &n)
{
    string z;
    string u=strupper(n);
    for(unsigned int i=0; i<n.size(); i++) {
        unsigned char c=u[i];
        unsigned char c1=nicks_char[c];
        z+=c1;
    }
    return strupper(z);
}
string trim(const string &s)
{
    deque<char> d;
    for(unsigned k=0; k<s.size(); k++)
    {
        d.push_back(s[k]);
    }
    while(d.size())
    {
        if(isspace(*d.begin())) d.pop_front();
        else break;
    }
    while(d.size())
    {
        if(isspace(*d.rbegin())) d.pop_back();
        else break;
    }
    string ret;
    for(unsigned i=0; i<d.size(); i++)
        ret+=d[i];
    return ret;
}


string repl_percent(const string & s)
{
    string a;
    for (unsigned int i = 0; i < s.size(); i++) {
        if (s[i] == '%') {
            if (i + 2 > s.size()) {
                break;
            }
            int c1 = u_table[s[i + 1]];
            int c2 = u_table[s[i + 2]];
            i += 2;
            if (c1 > 70 || c2 > 70) {
                continue;
            }
            if (c1 < 48 || c2 < 48) {
                continue;
            }
            if (c1 >= 48 && c1 <= 57) {
                c1 -= 48;
            }
            if (c2 >= 48 && c2 <= 57) {
                c2 -= 48;
            }
            if (c1 >= 65 && c1 <= 70) {
                c1 -= 55;
            }
            if (c2 >= 65 && c2 <= 70) {
                c2 -= 55;
            }
            a += (char) c1 *16 + c2;
        } else {
            if (s[i] == '+') {
                a += " ";
            }
            else {
                a += s[i];
            }
        }
    }
    return a;
}
